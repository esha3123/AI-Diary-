<% layout("/layouts/boilerplate") %>

<link rel="stylesheet" href="/CSS/entry-details-public.css">

<!-- Floating Background Elements -->
<div class="bg-decorations">
    <div class="floating-shape shape-1"></div>
    <div class="floating-shape shape-2"></div>
    <div class="floating-shape shape-3"></div>
    <div class="floating-shape shape-4"></div>
</div>

<div class="entry-details-container">
    <!-- Back Navigation -->
    <div class="navigation-header">
        <a href="/AI-diary/public" class="back-btn">
            <i class="fas fa-arrow-left"></i>
            <span>Back to Public Feed</span>
        </a>
        <div class="entry-actions">
            <button class="action-btn save-btn">
                <i class="far fa-bookmark"></i>
                <span>Save</span>
            </button>
            <button class="action-btn share-btn">
                <i class="fas fa-share"></i>
                <span>Share</span>
            </button>
        </div>
    </div>

    <!-- Main Entry Content -->
    <div class="entry-details-card">
        <!-- Entry Header -->
        <div class="entry-header">
            <div class="author-info">
                <div class="author-avatar">
                    <i class="fas fa-user-circle"></i>
                </div>
                <div class="author-details">
                    <h4 class="author-name">
                        Anonymous Writer
                        <span class="verified-badge"><i class="fas fa-check-circle"></i></span>
                    </h4>
                    <p class="entry-meta">
                        <i class="far fa-clock"></i>
                        Published <%= new Date(entry.createdAt).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'long', 
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                        }) %>
                        <span class="mood-indicator">
                            <i class="fas fa-circle"></i>
                            <%= entry.mood %>
                        </span>
                    </p>
                </div>
            </div>
            <div class="entry-mood">
                <span class="mood-emoji"><%= entry.mood %></span>
            </div>
        </div>

        <!-- Entry Title -->
        <div class="entry-title">
            <h1><%= entry.title %></h1>
            <div class="title-decoration"></div>
        </div>

        <!-- Entry Content -->
        <div class="entry-content">
            <div class="content-text">
                <%= entry.content %>
            </div>
            
            <!-- Entry Tags -->
            <div class="entry-tags">
                <span class="tag">#diary</span>
                <span class="tag">#public</span>
                <span class="tag">#<%= entry.mood === '😀' ? 'happy' : entry.mood === '😔' ? 'sad' : entry.mood === '😤' ? 'angry' : entry.mood === '😰' ? 'anxious' : entry.mood === '🤗' ? 'grateful' : 'funny' %></span>
                <span class="tag">#thoughts</span>
            </div>
        </div>

        <!-- Entry Stats -->
        <div class="entry-stats">
            <div class="stats-row">
                <div class="stat-item">
                    <i class="far fa-eye"></i>
                    <span>127 views</span>
                </div>
                <div class="stat-item">
                    <i class="far fa-heart"></i>
                    <span><%= entry.likes || 0 %> likes</span>
                </div>
                <div class="stat-item">
                    <i class="far fa-comment"></i>
                    <span><%= entry.comments ? entry.comments.length : 0 %> comments</span>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="entry-actions-bar">
            <% 
                const userId = req.ip || 'anonymous_user';
                const isLiked = entry.likedBy && entry.likedBy.includes(userId);
            %>
            <button class="action-btn like-btn <%= isLiked ? 'liked' : '' %>" data-entry-id="<%= entry._id %>" 
                    data-liked="<%= isLiked ? 'true' : 'false' %>">
                <div class="btn-icon">
                    <i class="<%= isLiked ? 'fas' : 'far' %> fa-heart"></i>
                </div>
                <span class="like-count"><%= entry.likes || 0 %></span>
                <span class="btn-text">Like</span>
            </button>
            
            <button class="action-btn comment-btn" onclick="scrollToComments()">
                <div class="btn-icon">
                    <i class="far fa-comment"></i>
                </div>
                <span class="comment-count"><%= entry.comments ? entry.comments.length : 0 %></span>
                <span class="btn-text">Comment</span>
            </button>
            
            <button class="action-btn tts-btn" onclick="generateTTS('<%= entry._id %>')">
                <div class="btn-icon">
                    <i class="fas fa-volume-up"></i>
                </div>
                <span class="btn-text">Listen</span>
            </button>
            
            <button class="action-btn share-btn">
                <div class="btn-icon">
                    <i class="far fa-share-square"></i>
                </div>
                <span class="btn-text">Share</span>
            </button>
            
            <button class="action-btn bookmark-btn">
                <div class="btn-icon">
                    <i class="far fa-bookmark"></i>
                </div>
                <span class="btn-text">Save</span>
            </button>
        </div>
    </div>

    <!-- AI Insights Section -->
    <div class="ai-insights-section-public">
        <div class="insight-card ai-motivation">
            <div class="card-header"> 
                <h3>
                    <i class="fas fa-brain"></i>
                    AI Insights
                </h3>
                <div class="insight-controls">
                    <select id="insightType" class="insight-type-select">
                        <option value="general">General Analysis</option>
                        <option value="mood">Mood Analysis</option>
                        <option value="growth">Growth Focus</option>
                        <option value="reflection">Deep Reflection</option>
                    </select>
                </div>
            </div>
            <div class="card-content">
                <!-- Control Buttons -->
                <div class="ai-controls">
                    <button class="action-btn ai-btn" onclick="generateAIInsights()" id="generateBtn">
                        <i class="fas fa-magic"></i>
                        Generate Insights
                    </button>
                    <button class="action-btn voice-btn" onclick="speakInsights()" id="voiceBtn" disabled>
                        <i class="fas fa-volume-up"></i>
                        Listen
                    </button>
                </div>

                <!-- Loading State -->
                <div class="ai-loading" id="aiLoading" style="display: none;">
                    <div class="loading-spinner">
                        <i class="fas fa-spinner fa-spin"></i>
                    </div>
                    <p class="loading-text">AI is analyzing this entry...</p>
                </div>

                <!-- AI Insights Content -->
                <div class="ai-insights-content" id="aiInsightsContent">
                    <div class="default-message">
                        <div class="ai-avatar">
                            <i class="fas fa-robot"></i>
                        </div>
                        <div class="message-content">
                            <h4>AI-Powered Story Analysis</h4>
                            <p>Click the button above to get personalized insights about this public story.</p>
                            <p><em>Get thoughtful analysis, emotional understanding, and growth suggestions.</em></p>
                        </div>
                    </div>
                </div>

                <!-- Error Display -->
                <div class="ai-error" id="aiError" style="display: none;">
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span id="errorText">Something went wrong!</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Comments Section -->
    <div class="comments-section-detailed" id="comments-section">
        <div class="comments-header">
            <h3><i class="fas fa-comments"></i> Comments (<%= entry.comments ? entry.comments.length : 0 %>)</h3>
            <div class="comments-controls">
                <button class="sort-btn">
                    <i class="fas fa-sort"></i>
                    Sort by Latest
                </button>
            </div>
        </div>

        <!-- Comments List -->
        <div class="comments-list-detailed">
            <% if (entry.comments && entry.comments.length > 0) { %>
                <% entry.comments.forEach((comment) => { %>
                    <div class="comment-item-detailed" data-comment-id="<%= comment._id %>">
                        <div class="comment-avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="comment-content">
                            <div class="comment-header">
                                <span class="comment-author">Anonymous User</span>
                                <span class="comment-time">
                                    <i class="far fa-clock"></i>
                                    <%= new Date(comment.createdAt).toLocaleDateString('en-US', { 
                                        month: 'short', 
                                        day: 'numeric',
                                        hour: '2-digit',
                                        minute: '2-digit'
                                    }) %>
                                </span>
                            </div>
                            <div class="comment-text"><%= comment.comment %></div>
                            <div class="comment-actions">
                                <button class="comment-like-btn" onclick="likeComment('<%= entry._id %>', '<%= comment._id %>', this)">
                                    <i class="<%= comment.count > 0 ? 'fas' : 'far' %> fa-heart"></i>
                                    <span><%= comment.count %></span>
                                </button>
                                <button class="comment-reply-btn">
                                    <i class="fas fa-reply"></i>
                                    Reply
                                </button>
                                <button class="comment-delete-btn" onclick="deleteComment('<%= entry._id %>', '<%= comment._id %>')">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <div class="no-comments-detailed">
                    <div class="no-comments-icon">
                        <i class="far fa-comment"></i>
                    </div>
                    <h4>No comments yet</h4>
                    <p>Be the first to share your thoughts on this entry!</p>
                </div>
            <% } %>
        </div>

        <!-- Add Comment Form -->
        <div class="add-comment-detailed">
            <form action="/AI-diary/<%= entry._id %>/comment" method="POST" class="comment-form-detailed">
                <div class="comment-form-header">
                    <div class="commenter-avatar">
                        <i class="fas fa-user"></i>
                    </div>
                    <span class="commenter-name">Add a comment</span>
                </div>
                <div class="comment-input-wrapper">
                    <textarea name="comment[comment]" 
                              placeholder="Write a thoughtful comment..." 
                              class="comment-textarea" 
                              rows="3" 
                              required></textarea>
                    <div class="comment-form-actions">
                        <div class="comment-features">
                            <button type="button" class="feature-btn emoji-btn">
                                <i class="far fa-smile"></i>
                            </button>
                            <button type="button" class="feature-btn mention-btn">
                                <i class="fas fa-at"></i>
                            </button>
                        </div>
                        <div class="form-buttons">
                            <button type="button" class="cancel-btn">Cancel</button>
                            <button type="submit" class="submit-btn">
                                <i class="fas fa-paper-plane"></i>
                                Post Comment
                            </button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Related Entries -->
    <div class="related-entries">
        <h3><i class="fas fa-book-open"></i> More Public Stories</h3>
        <div class="related-grid">
            <!-- This would be populated with other public entries -->
            <div class="related-item">
                <div class="related-mood">😀</div>
                <h4>Another Story Title</h4>
                <p>A brief preview of another public entry...</p>
                <span class="related-meta">2 hours ago</span>
            </div>
            <div class="related-item">
                <div class="related-mood">🤗</div>
                <h4>Grateful Moments</h4>
                <p>Sharing some beautiful moments of gratitude...</p>
                <span class="related-meta">1 day ago</span>
            </div>
        </div>
    </div>
</div>

<script>
// Scroll to comments function
function scrollToComments() {
    const commentsSection = document.getElementById('comments-section');
    const commentForm = document.querySelector('.add-comment-detailed');
    
    commentsSection.scrollIntoView({ 
        behavior: 'smooth',
        block: 'start'
    });
    
    // Show comment form
    commentForm.classList.add('show');
}

// Like functionality for detailed view
document.addEventListener('DOMContentLoaded', function() {
    initializeLikeButtons();
    initializeCommentForm();
});

function initializeLikeButtons() {
    const likeButtons = document.querySelectorAll('.like-btn');
    
    likeButtons.forEach(button => {
        const isLiked = button.dataset.liked === 'true';
        if (isLiked) {
            button.classList.add('liked');
        }
        
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const entryId = this.dataset.entryId;
            toggleLike(this, entryId);
        });
    });
}

function toggleLike(button, entryId) {
    const icon = button.querySelector('i');
    const countSpan = button.querySelector('.like-count');
    const isLiked = button.dataset.liked === 'true';
    let currentCount = parseInt(countSpan.textContent);
    
    const action = isLiked ? 'unlike' : 'like';
    const url = `/AI-diary/${entryId}/${action}`;
    
    button.disabled = true;
    
    fetch(url, {
        method: 'PATCH',
        headers: {
            'Content-Type': 'application/json',
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (action === 'like') {
                button.classList.add('liked');
                button.dataset.liked = 'true';
                icon.className = 'fas fa-heart';
                countSpan.textContent = data.likes;
                showToast('❤️ Liked!', 'success');
            } else {
                button.classList.remove('liked');
                button.dataset.liked = 'false';
                icon.className = 'far fa-heart';
                countSpan.textContent = data.likes;
                showToast('💔 Unliked', 'info');
            }
        }
    })
    .catch(error => {
        console.error('Error toggling like:', error);
    })
    .finally(() => {
        button.disabled = false;
    });
}

function initializeCommentForm() {
    const commentForm = document.querySelector('.add-comment-detailed');
    const cancelBtn = commentForm.querySelector('.cancel-btn');
    
    // Hide form when cancel button is clicked
    cancelBtn.addEventListener('click', function() {
        commentForm.classList.remove('show');
    });
    
    // Close form when clicking outside
    document.addEventListener('click', function(e) {
        if (!commentForm.contains(e.target) && 
            !e.target.classList.contains('comment-btn') && 
            !e.target.closest('.comment-btn')) {
            commentForm.classList.remove('show');
        }
    });
}

function showToast(message, type) {
    // Simple toast notification
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    toast.textContent = message;
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: var(--accent-green);
        color: white;
        padding: 12px 20px;
        border-radius: 8px;
        z-index: 10000;
        animation: slideIn 0.3s ease;
    `;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.remove();
    }, 3000);
}

// Comment functionality
function likeComment(entryId, commentId, button) {
    // Implementation similar to public.js
    fetch(`/AI-diary/${entryId}/comment/${commentId}/like`, {
        method: 'PATCH',
        headers: { 'Content-Type': 'application/json' }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const icon = button.querySelector('i');
            const countSpan = button.querySelector('span');
            let currentCount = parseInt(countSpan.textContent);
            
            icon.className = 'fas fa-heart';
            countSpan.textContent = currentCount + 1;
            button.style.color = 'var(--accent-red)';
        }
    })
    .catch(error => console.error('Error liking comment:', error));
}

function deleteComment(entryId, commentId) {
    if (confirm('Are you sure you want to delete this comment?')) {
        fetch(`/AI-diary/${entryId}/comment/${commentId}`, {
            method: 'DELETE',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => {
            if (response.ok) {
                location.reload(); // Reload to update comments
            }
        })
        .catch(error => console.error('Error deleting comment:', error));
    }
}
</script>

<!-- AI Insights JavaScript -->
<script>
let currentInsights = '';

async function generateAIInsights() {
    const diaryContent = `<%= entry.content.replace(/"/g, '\\"').replace(/\n/g, '\\n') %>`;
    const insightType = document.getElementById('insightType').value;
    
    // UI Elements
    const loadingElement = document.getElementById('aiLoading');
    const contentElement = document.getElementById('aiInsightsContent');
    const errorElement = document.getElementById('aiError');
    const generateBtn = document.getElementById('generateBtn');
    const voiceBtn = document.getElementById('voiceBtn');
    
    // Show loading state
    loadingElement.style.display = 'block';
    contentElement.style.display = 'none';
    errorElement.style.display = 'none';
    generateBtn.disabled = true;
    generateBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Analyzing...';
    
    try {
        const response = await fetch('/insights/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                diaryContent: diaryContent,
                insightType: insightType 
            })
        });
        
        const data = await response.json();
        
        if (data.success) {
            currentInsights = data.insights;
            
            // Display insights with Bollywood style
            contentElement.innerHTML = `
                <div class="ai-insights-result">
                    <div class="ai-avatar">
                        <i class="fas fa-robot"></i>
                    </div>
                    <div class="message-content">
                        <div class="insight-header">
                            <h4>
                                <i class="fas fa-star"></i> 
                                ${getInsightTitle(insightType)}
                            </h4>
                            <span class="insight-badge">${getInsightBadge(insightType)}</span>
                        </div>
                        <div class="insight-text">
                            <p>${data.insights}</p>
                        </div>
                        <div class="insight-footer">
                            <small class="text-muted">
                                <i class="fas fa-magic"></i> Generated by AI
                                <span class="insight-type-label">• ${insightType.charAt(0).toUpperCase() + insightType.slice(1)}</span>
                            </small>
                        </div>
                    </div>
                </div>
            `;
            
            contentElement.style.display = 'block';
            voiceBtn.disabled = false;
            
        } else {
            // Show error
            errorElement.querySelector('#errorText').textContent = data.error;
            errorElement.style.display = 'block';
        }
        
    } catch (error) {
        console.error('Network Error:', error);
        errorElement.querySelector('#errorText').textContent = 'Network error! Please check your internet connection.';
        errorElement.style.display = 'block';
    } finally {
        // Hide loading
        loadingElement.style.display = 'none';
        generateBtn.disabled = false;
        generateBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Regenerate';
    }
}

// Helper functions for UI
function getInsightTitle(type) {
    switch(type) {
        case 'mood': return 'Mood Analysis';
        case 'growth': return 'Growth Insights';
        case 'reflection': return 'Deep Reflection';
        default: return 'AI Analysis';
    }
}

function getInsightBadge(type) {
    switch(type) {
        case 'mood': return '💝 Emotions';
        case 'growth': return '🚀 Growth';
        case 'reflection': return '🤔 Thoughts';
        default: return '🎭 General';
    }
}

// Text-to-Speech function for insights
function speakInsights() {
    if (!currentInsights) {
        alert('Please generate insights first!');
        return;
    }
    
    const voiceBtn = document.getElementById('voiceBtn');
    
    if ('speechSynthesis' in window) {
        // Stop any ongoing speech
        speechSynthesis.cancel();
        
        const utterance = new SpeechSynthesisUtterance(currentInsights);
        
        // Try to find Hindi/Indian voice
        const voices = speechSynthesis.getVoices();
        const indianVoice = voices.find(voice => 
            voice.lang.includes('hi') || 
            voice.lang.includes('en-IN') ||
            voice.name.toLowerCase().includes('hindi') ||
            voice.name.toLowerCase().includes('indian')
        );
        
        if (indianVoice) {
            utterance.voice = indianVoice;
        }
        
        // Set speech properties
        utterance.rate = 0.9;    // Slightly slower for clarity
        utterance.pitch = 1.1;   // Slightly higher pitch
        utterance.volume = 1;    // Full volume
        
        // Event handlers
        utterance.onstart = () => {
            voiceBtn.innerHTML = '<i class="fas fa-stop voice-animation"></i> Stop';
            voiceBtn.classList.add('speaking');
            voiceBtn.onclick = () => {
                speechSynthesis.cancel();
            };
        };
        
        utterance.onend = () => {
            voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i> Listen';
            voiceBtn.classList.remove('speaking');
            voiceBtn.onclick = speakInsights;
        };
        
        utterance.onerror = () => {
            voiceBtn.innerHTML = '<i class="fas fa-volume-up"></i> Listen';
            voiceBtn.classList.remove('speaking');
            voiceBtn.onclick = speakInsights;
            alert('Voice playback error!');
        };
        
        speechSynthesis.speak(utterance);
        
    } else {
        alert('Your browser does not support voice features! Please try Chrome or Firefox.');
    }
}

// Load voices when page loads
window.addEventListener('load', () => {
    if ('speechSynthesis' in window) {
        // Load voices
        speechSynthesis.getVoices();
        
        // Some browsers need this event
        speechSynthesis.onvoiceschanged = () => {
            speechSynthesis.getVoices();
        };
    }
});

// TTS Function for diary entry
window.generateTTS = async function(entryId) {
    console.log('🎯 Public Entry TTS called for:', entryId);
    
    const button = document.querySelector('.tts-btn');
    if (!button) {
        alert('TTS button not found!');
        return;
    }
    
    const originalText = button.innerHTML;
    
    // Force button to work
    button.disabled = false;
    button.removeAttribute('disabled');
    button.style.pointerEvents = 'auto';
    
    try {
        button.innerHTML = '<div class="btn-icon"><i class="fas fa-spinner fa-spin"></i></div><span class="btn-text">Loading...</span>';
        button.classList.add('generating');
        
        const response = await fetch(`/tts/generate/${entryId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.error || 'TTS failed');
        }
        
        button.disabled = false;
        button.classList.remove('generating');
        
        if (data.useBrowserTTS && window.speechSynthesis) {
            button.innerHTML = '<div class="btn-icon"><i class="fas fa-volume-up"></i></div><span class="btn-text">Speaking...</span>';
            button.classList.add('playing');
            
            speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(data.text);
            utterance.lang = 'hi-IN';
            utterance.pitch = 0.7;
            utterance.rate = 0.8;
            
            utterance.onstart = () => {
                showToast('🎬 Filmy voiceover शुरू!', 'success');
            };
            
            utterance.onend = () => {
                button.innerHTML = '<div class="btn-icon"><i class="fas fa-volume-up"></i></div><span class="btn-text">Listen</span>';
                button.classList.remove('playing');
                button.disabled = false;
            };
            
            utterance.onerror = () => {
                button.innerHTML = '<div class="btn-icon"><i class="fas fa-volume-up"></i></div><span class="btn-text">Try Again</span>';
                button.classList.remove('playing');
                button.disabled = false;
            };
            
            speechSynthesis.speak(utterance);
        } else {
            showToast('🎵 TTS Generated! ' + (data.message || ''), 'success');
            button.innerHTML = originalText;
        }
        
    } catch (error) {
        button.innerHTML = '<div class="btn-icon"><i class="fas fa-exclamation-triangle"></i></div><span class="btn-text">Error</span>';
        button.classList.remove('generating', 'playing');
        button.disabled = false;
        showToast('❌ Error: ' + error.message, 'error');
        
        setTimeout(() => {
            button.innerHTML = originalText;
        }, 3000);
    }
};
</script>

<script src="/js/tts-fixed.js"></script>
